{
  "rbf_createRecord": {
    "scope": "javascript",
    "prefix": "rbf_createRecord",
    "body": "rbf_createRecord(objName, fieldMap, useIds, callback, useLegacyDateFormat);",
    "description": "Purpose\nThis method creates a new record without changing the UI presentation. If an error occurred during operation error notification procedure will be invoked. For fields that allow values in multiple languages, you can specify those values using the fieldMap parameter. When setting field values, it is mandatory to set a field value in the tenant's base language.\n\nParameters\nobjName: The object integration name.\nfieldMap: A JSON object of the form: {\"fieldIntegrationName1\":value1, \"fieldIntegrationName2\":value2}. When setting field values for multilingual fields, each value can be a JSON object, for example: {\"fieldIntegrationName1\":{\"en\":\"EnglishValue1\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue1\"}, \"fieldIntegrationName2\":{\"en\":\"EnglishValue2\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue2\"}}\nuseIds: If true, the API will accept numeric IDs; if false (default) the API will return integration codes for status fields and picklists\ncallback: A callback function that will receive the new record ID as its parameter\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_deleteRecord": {
    "scope": "javascript",
    "prefix": "rbf_deleteRecord",
    "body": "rbf_deleteRecord(objName, id, callback);",
    "description": "Purpose\nThis method deletes an existing backend record without changing UI presentation. If error occurred during operation error notification procedure will be invoked.\n\nParameters\nobjName: The integration name of the selected Object definition\nid: ID of the selected Object record\ncallback: A function to be executed when the operation is successful. It does not receive any parameters. This is an optional parameter."
  },
  "rbf_getCount": {
    "scope": "javascript",
    "prefix": "rbf_getCount",
    "body": "rbf_getCount(viewId, callback);",
    "description": "Purpose\nThis function retrieves total number of records in a view. It brings info back to the page using an asynchronous AJAX mechanism.\n\nParameters\nviewID: The original ID of View\ncallback: A callback function that will receive number of records as first parameter"
  },
  "rbf_getCount2": {
    "scope": "javascript",
    "prefix": "rbf_getCount2",
    "body": "rbf_getCount2(viewId, filterName, filterValue, callback, useLegacyDateFormat);",
    "description": "Purpose\nAfter applying the specified filter condition, retrieves the number of records in a view that meet that condition.\n\nParameters\nviewId: The original ID of the view\nfilterName: Name of the filter added to existing filters.\nfilterValue: The value of the field to filter output using \"equals\".\ncallback: A function to process the specified operation and receive its result, in the XML format, as the first argument.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_getDateInISOFromUserFormat": {
    "scope": "javascript",
    "prefix": "rbf_getDateInISOFromUserFormat",
    "body": "rbf_getDateInISOFromUserFormat(inputDate, format, keepOffSet);",
    "description": "Purpose\nThis function converts the input Date or Date/Time value from User format to ISO format.\n\nParameters\ninputDate: The Date or Date/Time value to be returned.\nformat: The format of the date to be returned. To convert input value into Date format, enter Date and to convert input value into Date/Time format, enter DateTime in the format parmeter.\nkeepOffSet: This parameter is applicable only if the input value is a Date/Time value. If keepOffSetis set to true, UTC conversions are prevented while maintaining the timezone offset. By default keepOffSet is set to false.\n\nReturn Value\nResult in string."
  },
  "rbf_getDateInUserFormatFromISO": {
    "scope": "javascript",
    "prefix": "rbf_getDateInUserFormatFromISO",
    "body": "rbf_getDateInUserFormatFromISO(inputDate, format);",
    "description": "Purpose\nThis function converts an input Date or Date/Time value from ISO format to User format.\n\nParameters\nnputDate: The Date or Date/Time value to be returned.\nformat: The format of the date to be returned. To convert input value into Date format, enter Date and to convert input value into Date/Time format, enter DateTime in the format parmeter.\n\nReturn Value\nResult in string."
  },
  "rbf_getViewCount": {
    "scope": "javascript",
    "prefix": "rbf_getViewCount",
    "body": "rbf_getViewCount(viewId, callback, options);",
    "description": "Purpose\nThis function fetches the number of records in a view, after applying filters, if any.\n\nParameters\nviewId: The original ID of the view.\ncallback: A function to process the specified operation and receive the record count as the first argument.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tfiltering: The filters to be applied on the view."
  },
  "rbf_getFields": {
    "scope": "javascript",
    "prefix": "rbf_getFields",
    "body": "rbf_getFields(objName, id, fields, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function retrieves the values of specified fields for a selected Platform record. It brings information back to the page using the asynchronous AJAX mechanism. For fields that contain values for different languages, pass a langCode value in the options parameter to get the values in a specific language. If the field does not allow multiple languages, or if there is no value for the specified language, the value is returned in the tenant's base language.\n\nParameters\nobjName: The object integration name.\nid: ID of the selected record\nfields: A comma-separated list of field integration names\ncallback: A callback function that will receive parameters: objName, id, an array of received values, which can be accessed using field's integration name as a key (see example below).\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_getPage": {
    "scope": "javascript",
    "prefix": "rbf_getPage",
    "body": "rbf_getPage(viewId, startRow, rowsPerPage, composite, objNames, fieldList, callback, onlyViewFields, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function fetches a set of records in a view, including (optionally) dependent records. It brings info back to the page using an asynchronous AJAX mechanism. The amount of processing and time required to get complete results can vary widely, depending on whether it fetches related records and the number of rows you specify per page.\nFor pages containing fields that allow values in multiple languages, you can use the options parameter to specify the language in which to return the values. If the values are not available in the specified language, it will return the values for the tenant's base language. If the specified language is not configured for the tenant, it will throw an error. To use the options parameter, you must also provide values for the onlyViewFields and useLegacyDateFormat parameters.\n\nParameters\nviewId: The original ID of the view\nstartRow: The row to start fetching records from (0 by default)\nrowsPerPage: The maximum number of row to fetch in one call (user-specified value by default)\ncomposite: The depth of recursion of dependent records to fetch (0 by default)\nobjNames: A comma-separated list of dependent object names to fetch (use \"*\" for all objects - default value)\nfieldList: A comma-separated list of field names to fetch (use \"*\" for all fields - default value)\ncallback: A callback function that will receive an array of fetched records as first parameter\nonlyViewFields: When true, the output only includes fields in the specified view. When false, the output includes all fields in the object definition.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_getPage2": {
    "scope": "javascript",
    "prefix": "rbf_getPage2",
    "body": "rbf_getPage2(viewId, startRow, rowsPerPage, composite, objNames, fieldList, filterName, filterValue, callback, onlyViewFields, useLegacyDateFormat, options);",
    "description": "Purpose\nSimilar to rbf_getPage(), this function fetches a set of records in a view, including (optionally) dependent records, but allows you to apply a filter to the results. It brings info back to the page using asynchronous AJAX mechanism. The amount of processing and time required to get complete results can vary widely, depending on whether it fetches related records and the number of rows you specify per page.\nFor pages containing fields that allow values in multiple languages, you can use the options parameter to specify the language in which to return the values. If the values are not available in the specified language, it will return the values for the tenant's base language. If the specified language is not configured for the tenant, it will throw an error. To use the options parameter, you must also provide values for the onlyViewFields and useLegacyDateFormat parameters.\n\nParameters\nviewId: The original ID of the view\nstartRow: The row to start fetching records from (0 by default)\nrowsPerPage: The maximum number of row to fetch in one call (user-specified value by default)\ncomposite: The depth of recursion of dependent records to fetch (0 by default)\nobjNames: A comma-separated list of dependent object names to fetch (use \"*\" for all objects - default value)\nfieldList: A comma-separated list of field names to fetch (use \"*\" for all fields - default value)\nfilterName: The name of field used to filter output records\nfilterValue: A value used for filtering in the the same format as for spreadsheet import\ncallback: A callback function that will receive array of fetched records as first parameter\nonlyViewFields: When true, the output only includes fields in the specified view. When false, the output includes all fields in the object definition.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_getViewPage": {
    "scope": "javascript",
    "prefix": "rbf_getViewPage",
    "body": "rbf_getViewPage(viewId, callback, options);",
    "description": "Purpose\nThis function fetches a set of records in a view, including (optionally) dependent records and allows you to apply a filter to the results. It brings info back to the page using an asynchronous AJAX mechanism. The amount of processing and time required to get complete results can vary widely, depending on whether it fetches related records and the number of rows you specify per page.\nFor pages containing fields that allow values in multiple languages, you can use the options parameter to specify the language in which to return the values. If the values are not available in the specified language, it will return the values for the tenant's base language. If the specified language is not configured for the tenant, it will throw an error.\n\nParameters\nviewId: The original ID of the view.\ncallback: A callback function that will receive an array of fetched records as first parameter.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tstartRow: The row to start fetching records from (0 by default).\n\trowsPerPage: The maximum number of row to fetch in one call (user-specified value by default).\n\tcomposite: The option to retrieve related records.\n\t\tlevel: The depth of recursion of dependent records (0 by default).\n\t\tobjects: An array of objects where each element has two mandatory attributes – objName and fieldList. There must be a valid value for objects if level >0.\n\t\t\tobjName: A valid integration name of a related object. (null and * are not valid values).\n\t\t\tfieldList: A comma-separated list of field names to fetch for corresponding objects. You can provide different fieldList for different related objects as part of composite. This fieldList is independent of the view object fieldList. (null and * are not valid values).\n\tfieldList: A comma-separated list of field names to fetch (use \"*\" for all fields - default value).\n\tuseLegacyDateFormat: If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\n\tfiltering: The filters to be applied on the view.\n\tsorting: The sorting to be applied on the view.\n\tlangCode: A valid two-letter ISO language code, for example, {\"langCode\":\"es\"}.\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\t\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned.\nIf there are filters mentioned in the view definition page, the joinType is derived from the view definition page and it ignores the joinType (if any) specified on the API call.\nIf there are no filters defined in the view definition page, the joinType is derived from the API call. So, it is mandatory to specify the joinType in such a case."
  },
  "rbf_getRelatedFields2": {
    "scope": "javascript",
    "prefix": "rbf_getRelatedFields2",
    "body": "rbf_getRelatedFields2(relName, objName, id, fieldName, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function retrieves the values of the selected fields for records related to a selected Platform record.\nFor fields that allow values in multiple languages, you can specify the language in which to return values in the options parameter. If the values are not available in the specified language, it will return the values for the tenant's base language. If the specified language is not configured for the tenant, it will throw an error. To use the options parameter, you must set a value for useLegacyDateFormat.\n\nParameters\nrelName: The integration name of selected Relationship definition\nobjName: The integration name of selected Object definition\nid: The ID of selected Object record\nfieldName: The integration name of Field to retrieve (for related records)\ncallback: A callback function that will receive parameters: relName, id, an array of received values (one value per related record).\nspecified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_getRelatedIds": {
    "scope": "javascript",
    "prefix": "rbf_getRelatedIds",
    "body": "rbf_getRelatedIds(relName, id, callback);",
    "description": "Purpose\nFor native Platform objects, this function retrieves the ids of records related to a selected Platform record.\n\nParameters\nrelName: Integration name of selected Relationship definition\nid: ID of selected Object record\ncallback: A callback function that will receive parameters: relName, id, an array of related ids."
  },
  "rbf_getRelatedIds2": {
    "scope": "javascript",
    "prefix": "rbf_getRelatedIds2",
    "body": "rbf_getRelatedIds2(relName, objName, id, callback);",
    "description": "Purpose\nFor objects in dedicated tables or external objects (such as those mapped to external tables, to OpenEdge Service objects, or through a HDP connection), this function retrieves the ids of records related to a selected Platform record.\n\nParameters\nrelName: Integration name of selected Relationship definition\nobjName: The integration name of selected Object definition\nid: ID of selected Object record\ncallback: A callback function that will receive parameters: relName, id, an array of related ids."
  },
  "rbf_runTrigger": {
    "scope": "javascript",
    "prefix": "rbf_runTrigger",
    "body": "rbf_runTrigger(objName, id, triggerId, checkCondition, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function sends AJAX request to run a trigger on selected record.\n\nParameters\nobjName: The integration name of the selected object definition\nid: ID of the selected object record\ntriggerID: The integration name (string) or original ID (string) of trigger to run\ncheckCondition: If true, check trigger's condition formula before running trigger, otherwise ignore condition formula.\ncallback: A function to be called when AJAX request returns (optional). Will receive single parameter: true or false depending on whether trigger has actually ran.\nuseLegacyDateFormat: This only applies to Date and Date/Time fields in JSON output. When set to false, a date value is returned as a String. When set to true, a date value is returned as a Date object. Default value is true\noptions: options is a list where maximum of two name-value pairs set in a variable in the form {name1 : value1 , name2 : value2} can be configured. The possible names are runRecursions & rollbackOnFailure with the values true or false.\n\tWhen the key runRecursions is set to true, it configures trigger to run recursively, assuming recursive properties are set on the trigger definition page. Default value is false.\n\tWhen the key rollbackOnFailure is set to true, it configures trigger to revert the changes which was the part of execution enabling the user to perform the action again. Default value is false."
  },
  "rbf_selectNumber": {
    "scope": "javascript",
    "prefix": "rbf_selectNumber",
    "body": "rbf_selectNumber(query, callback);",
    "description": "Purpose\nThis function runs a SQL SELECT query on the server and returns a single decimal number to the callback function. This is a simplified version of rbf_selectValue suitable for calculating totals etc.\n\nParameters\nquery: SQL SELECT query.\ncallback: A callback function that will receive a single value returned by the query."
  },
  "rbf_selectQuery": {
    "scope": "javascript",
    "prefix": "rbf_selectQuery",
    "body": "rbf_selectQuery(query, maxRows, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function runs a SQL SELECT query on the server and returns results as a 2D array to the callback function. For fields that contain values for different languages, pass a langCode value in the options parameter to get the values in a specific language. If the field does not allow multiple languages, or if there is no value for the specified language, the value is returned in the tenant's base language. To use the options parameter, you must specify a value for useLegacyDateFormat. Throws an error if the specified language code is not configured for the tenant.\n\nParameters\nquery: SQL SELECT query. See Query API section below for examples and limitations.\nmaxRows: Maximum number of rows to retrieve (1-20,000 range)\ncallback: A callback function that will receive a 2D JSON array with query results as parameter.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_selectQuery2": {
    "scope": "javascript",
    "prefix": "rbf_selectQuery2",
    "body": "rbf_selectQuery2(query, rowFrom, maxRows, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function runs a SQL SELECT query on the server and returns results as a 2D array to the callback function. It differs from rbf_selectQuery() in that it takes a rowFrom parameter where you can specify a starting row other than 0. For fields that contain values for different languages, pass a langCode value in the options parameter to get the values in a specific language. If the field does not allow multiple languages, or if there is no value for the specified language, the value is returned in the tenant's base language. To use the options parameter, you must specify a value for useLegacyDateFormat. Throws an error if the specified language code is not configured for the tenant.\n\nParameters\nquery: SQL SELECT query. See Query API section below for examples and limitations.\nrowFrom: Number of row to start output (0 based)\nmaxRows: Maximum number of rows to retrieve (1-20,000 range)\ncallback: A callback function that will receive a 2D JSON array with query results as parameter.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_selectValue": {
    "scope": "javascript",
    "prefix": "rbf_selectValue",
    "body": "rbf_selectValue(query, callback, useLegacyDateFormat, options);",
    "description": "Purpose\nThis function runs a SQL SELECT query on the server and returns a single value to the callback function. For fields that contain values for different languages, pass a langCode value in the options parameter to get the values in a specific language. If the field does not allow multiple languages, or if there is no value for the specified language, the value is returned in the tenant's base language. To use the options parameter, you must specify a value for useLegacyDateFormat. Throws an error if the specified language code is not configured for the tenant.\n\nParameters\nquery: SQL SELECT query.\ncallback: A callback function that will receive a single JSON value brought by the query.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String.\noptions: An optional JSON object that sets the values of optional arguments. The properties that this object can take are as follows:\n\tlangCode to a valid two-letter ISO language code, for example, {\"langCode\":\"es\"}\n\tuseISODateFormat to get the date or date/time values in ISO format, for example, {\"useISODateFormat\":true}.\n\t\tIf the date and time value is Mon Jul 30 00:01:00 IST 2018 its equivalent ISO formatted value 2018-07-29T18:31:00Z- is returned.\n\t\tIf the date value is Mon Jul 30 2018, its equivalent ISO formatted value 2018-07-30 is returned."
  },
  "rbf_setField": {
    "scope": "javascript",
    "prefix": "rbf_setField",
    "body": "rbf_setField(objName, id, fieldName, fieldValue, useIds, callback, useLegacyDateFormat);",
    "description": "Purpose\nThis function sets the value of specified field for a selected Platform record and modifies the actual record value without changing the UI presentation. Compare with rbf_setFieldValue() API which sets UI presentation but does not immediately change backend value.\nIf an error occurred during update operation, an error notification procedure will be invoked.\nFor fields that allow values in multiple languages, use the fieldValue parameter to set values for additional languages. If there is not already a value in a field for the tenant's base language, it is mandatory to supply a value for the base language.\n\nParameters\nobjName: The integration name of the selected Object definition\nid: ID of the selected object record\nfieldName: The name of the field for which the value will be set\nfieldValue: The new value for the field. For fields that support multiple languages, the value of this parameter is a JSON object that specifies the two-letter ISO language code and value for each language, for example: {\":en\":\"EnglishValue\",\"el\":\"GreekValue\"}\nuseIds: If true, the API will accept numeric IDs; if false (default) the API will return integration codes for status fields and picklists\ncallback: A function to be executed when the operation is successful. It does not receive any parameters. This is an optional parameter.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_updateRecord": {
    "scope": "javascript",
    "prefix": "rbf_updateRecord",
    "body": "rbf_updateRecord(objName, id, fieldMap, useIds, callback, useLegacyDateFormat);",
    "description": "Purpose\nThis method modifies record values of a Platform object without changing UI presentation. If an error occurs during the operation, an error notification procedure will be invoked (see rbf_setErrorsCallback). For fields that allow values in multiple languages, you can specify those values using the fieldMap parameter. When updating field values, it only mandatory to update a field value in the tenant's base language when that field does not already have a value in the base language.\n\nParameters\nobjName: The integration name of the selected Object definition\nid: ID of the selected Object record\nfieldMap: A JSON object of the form: {\"fieldIntegrationName1\":value1, \"fieldIntegrationName2\":value2}. When setting field values for multilingual fields, each value can be a JSON object, for example: {\"fieldIntegrationName1\":{\"en\":\"EnglishValue1\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue1\"}, \"fieldIntegrationName2\":{\"en\":\"EnglishValue2\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue2\"}}\nuseIds: If true, the API will accept numeric IDs; if false (default) the API will return integration codes for status fields and picklists\ncallback: A function to be executed when the operation is successful. It does not receive any parameters. This is an optional parameter.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_createRecordMultiPart": {
    "scope": "javascript",
    "prefix": "rbf_createRecordMultiPart",
    "body": "rbf_createRecordMultiPart(objName, fieldMap, useIds, callback, useLegacyDateFormat);",
    "description": "Purpose\nThis method creates a new record without changing the UI presentation. If an error occurred during operation error notification procedure will be invoked. For all fields including the file and image upload that allow values in multiple languages, you can specify those values using the fieldMap parameter. When setting field values, it is mandatory to set a field value in the tenant's base language.\n\nParameters\nobjName: The object integration name.\nfieldMap: A JSON object of the form: {\"fieldIntegrationName1\":value1, \"fieldIntegrationName2\":value2}. When setting field values for multilingual fields, each value can be a JSON object, for example: {\"fileupload\":\"\",\"imageupload\":\"\",\"fieldIntegrationName1\":{\"en\":\"EnglishValue1\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue1\"},  \"fieldIntegrationName2\":{\"en\":\"EnglishValue2\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue2\"}}\nuseIds: If true, the API will accept numeric IDs; if false (default) the API will return integration codes for status fields and picklists\ncallback: A callback function that will receive the new record ID as its parameter\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_updateRecordMultiPart": {
    "scope": "javascript",
    "prefix": "rbf_updateRecordMultiPart",
    "body": "rbf_updateRecordMultiPart(objName, id, fieldMap, useIds, callback, useLegacyDateFormat);",
    "description": "Purpose\nThis method modifies record values of a Platform object without changing UI presentation. If an error occurs during the operation, an error notification procedure will be invoked (see rbf_setErrorsCallback). For all fields including the file and image upload that allow values in multiple languages, you can specify those values using the fieldMap parameter. When updating field values, it only mandatory to update a field value in the tenant's base language when that field does not already have a value in the base language.\n\nParameters\nobjName: The integration name of the selected Object definition\nid: ID of the selected Object record\nfieldMap: A JSON object of the form: {\"fieldIntegrationName1\":value1, \"fieldIntegrationName2\":value2}. When setting field values for multilingual fields, each value can be a JSON object, for example: {\"fileupload\":\"\",\"imageupload\":\"\",\"fieldIntegrationName1\":{\"en\":\"EnglishValue1\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue1\"}, \"fieldIntegrationName2\":{\"en\":\"EnglishValue2\",\"ar\":\"ةشغشىن\",\"fr\":\"FrenchValue2\"}}\nuseIds: If true, the API will accept numeric IDs; if false (default) the API will return integration codes for status fields and picklists\ncallback: A function to be executed when the operation is successful. It does not receive any parameters. This is an optional parameter.\nuseLegacyDateFormat: This optional parameter only applies to JSON output and, specifically, to Date and Date/Time fields. If true, or if not specified, a date value is returned as a Date object. If false, a date value is returned as a String."
  },
  "rbf_setBinaryData": {
    "scope": "javascript",
    "prefix": "rbf_setBinaryData",
    "body": "rbf_setBinaryData(objName, id, fieldName);",
    "description": "Purpose\nThis function is used to upload selected files in the file and image upload fields for a specific Platform record.\n\nParameters\nobjName: The object integration name.\nid: ID of the selected record\n fieldName: Integration name of the field to update"
  },
}